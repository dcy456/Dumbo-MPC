/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern char* pySRSGen(GoInt srsSize);
extern char* pyVMmatrixGen(char* json_publickey, GoInt t);
extern char* pyKeyGeneration(char* json_SRS, GoInt n);
extern char* pyPedSampleSecret(GoInt batchsize);
extern char* pyPedCommit(char* json_SRS, char* json_secret, GoInt t);
extern GoUint8 pyPedVerify(char* json_SRS, char* json_commitment, char* json_eval, GoInt my_id, GoInt degree);
extern GoUint8 pyPedBatchVerify(char* json_SRS, char* json_commitment, char* json_eval, GoInt my_id, GoInt degree);
extern char* pyPedKeyEphemeralGen(char* json_SRS_pk, char* json_publickey);
extern char* pyPedSharedKeysGen_sender(char* json_publickey, char* json_ephemeralsecretkey, GoInt index);
extern char* pyPedSharedKeysGen_recv(char* json_ephemeralpublickey, char* json_secretkey);

// this function is for generating random shares without random extraction by hyper-invertible matrix
//
extern char* pyPedRandomShareComputeWithoutRanExt(char* json_com, char* json_sharelist);
extern char* pyPedParseRandom_Commit(char* json_SRS_Pk, char* json_commitment, char* json_share, GoInt t, GoInt my_id);
extern GoUint8 pyPedprodverify(char* json_Pk, char* json_commitment_c, char* json_commitment_ab, char* json_T_ab, char* json_T_c, char* json_proofproduct, char* json_proof_ab, char* json_proof_c, int dealer_id, int t);
extern char* pyPedTriplesCompute(char* json_commonset, char* json_shares_ab, char* json_c_shares, char* json_c_com);

#ifdef __cplusplus
}
#endif
